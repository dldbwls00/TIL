// boj 1783 병든 나이트
// greedy

const input = require("fs").readFileSync("./example.txt").toString().split("\n");
// const input = require("fs").readFileSync("/dev/stdin").toString().split("\n");

const [n, m] = input[0].split(" ").map(Number);

// 네 가지 방법을 모두 사용한다면 최소 위로 2칸, 오른쪽으로 6칸을 이동해야함
// 즉 이동 횟수가 4번보다 작지 않은 경우의 최소 맵 사이즈는 7x3

// 이동 횟수가 4번보다 작은 경우 (방문한 칸이 5개 미만)
// 1. 세로가 1이거나 가로가 1인 경우 이동 불가능 -> 1개 칸 방문 (초기 위치)
// 2. 세로가 2, 가로가 2인 경우 이동 불가능 -> 1개 칸 방문 (초기 위치)
// 3. 세로가 2, 가로가 3 이상인 경우
//      가로가 3, 4인 경우 2칸, 가로가 5, 6인 경우 3칸 방문 가능
//      즉 (가로+1)/2 만큼 방문할 수 있음
//      가로가 8보다 커지면 무조건 4칸 (이동횟수 3회)
// 4. 세로가 3, 가로가 2 이상인 경우
//      가로가 2인 경우 2칸, 가로가 3인 경우 3칸, ...
//      즉 (가로) 만큼 방문할 수 있음
//      가로가 5보다 커지면 무조건 4칸 (이동횟수 3회)
//      가로가 7보다 큰 경우 네 가지 방법을 모두 사용할 수 있지만 최대 횟수는 아님
// 5. 세로가 4 이상, 가로가 7 미만인 경우
//      4와 같음
// 6. 세로가 4 이상, 가로가 7 이상인 경우
//      가로 7칸을 소모해 일단 4가지를 모두 이용 (5칸 방문)
//      그 다음부터는 4와 같으므로 (가로-7)칸 더 이동 가능
let result = 0;
if (n === 1) result = 1;
else if (n === 2) result = Math.min(4, Math.floor((m + 1) / 2));
else if (m < 7) result = Math.min(4, m);
else result = m - 7 + 5;
console.log(result);
